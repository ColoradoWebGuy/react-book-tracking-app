{"version":3,"sources":["Book.js","ListBooks.js","BooksAPI.js","SearchBooks.js","App.js","index.js"],"names":["Book","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","event","setBookShelf","id","book","shelf","target","value","bookObj","onChange","_this$props","_this$props$myReads","myReads","shelfStatus","forEach","b","react_default","a","createElement","className","key","undefined","imageLinks","thumbnail","length","style","width","height","backgroundcolor","backgroundImage","disabled","title","concat","authors","join","Component","ListBooks","_ref","library","onBookUpdate","handleBookUpdate","setBook","map","src_Book","react_router_dom","to","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","update","method","objectSpread","Content-Type","body","JSON","stringify","search","query","SearchBooks","_useState","useState","_useState2","slicedToArray","setQuery","_useState3","_useState4","queryResults","setQueryResults","clearResults","type","placeholder","inputQuery","BooksAPI","bookSearchResults","toConsumableArray","BooksApp","setLibrary","useEffect","_fetchBooks","asyncToGenerator","regenerator_default","mark","_callee","booksFromApi","wrap","_context","prev","next","sent","stop","apply","arguments","fetchBooks","updateBookStatus","bookExists","updatedLibrary","filter","newBook","push","react_router","path","element","src_ListBooks","exact","src_SearchBooks","ReactDOM","render","navigate","useNavigate","document","getElementById"],"mappings":"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","file":"static/js/main.2d5c156f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Book extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n   }\n\n    handleChange(event) {\n        let setBookShelf = {\n            id: this.props.book.id,\n            shelf: event.target.value,\n            bookObj: this.props.book\n        }\n        if (this.props.book.shelf !== event.target.value) {\n            this.props.onChange(setBookShelf)\n        }\n    }\n\n    render() {\n        const { book, myReads = false } = this.props\n        let shelfStatus = 'none'\n        if (myReads !== false) {\n            myReads.forEach((b) => {\n                if (b.id === book.id) {\n                    shelfStatus = b.shelf\n                }\n            })\n        } else {\n            shelfStatus = book.shelf\n        }\n        return (\n            <div className=\"book\" key={book.id}>\n                <div className=\"book-top\">\n                    {book.imageLinks !== undefined && book.imageLinks.thumbnail !== undefined && book.imageLinks.length !== 0 &&\n                    <div className=\"book-cover\" \n                        style={{ width: 128, height: 193, backgroundcolor: '#1c1c1c', backgroundImage:'url(\"'+ book.imageLinks.thumbnail +'\")' }}>\n                    </div>\n                    }\n                    <div className=\"book-shelf-changer\">\n                        <select value={(shelfStatus !== undefined ? shelfStatus : 'none')} onChange={this.handleChange}>\n                            <option value=\"move\" disabled>Move to...</option>\n                            <option value=\"currentlyReading\">Currently Reading</option>\n                            <option value=\"wantToRead\">Want to Read</option>\n                            <option value=\"read\">Read</option>\n                            <option value=\"none\">None</option>\n                        </select>\n                    </div>\n                </div>\n                {book.title !== undefined &&\n                <div className=\"book-title\">{`${book.title}`}</div>\n                }\n                {book.authors !== undefined &&\n                <div className=\"book-authors\">{`${ book.authors.join(', ') }`}</div>\n                }\n                {/* <div className=\"book-authors\">{`${shelfStatus}`}</div> */}\n            </div>\n        )\n    }\n}\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  myReads: PropTypes.arrayOf(PropTypes.object)\n}\n\nexport default Book;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Book from './Book'\nimport PropTypes from 'prop-types'\n\nfunction ListBooks({library, onBookUpdate}) {\n\n    const handleBookUpdate = (setBook) => {\n      if (onBookUpdate) {\n        onBookUpdate(setBook)\n      }\n    }\n\n    return (\n        <div className=\"list-books\">\n          <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n          </div>\n          <div className=\"list-books-content\">\n            <div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                      {library.map((book) => {\n                          if (book.shelf === 'currentlyReading') {\n                            return (<li key={book.id}>\n                              <Book \n                                book={book} \n                                onChange={(setBook) => handleBookUpdate(setBook)} />\n                            </li>)\n                          } else {\n                            return ''\n                          }\n                        }\n                     )}\n                  </ol>\n                </div>\n              </div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    {library.map((book) => {\n                          if (book.shelf === 'wantToRead') {\n                            return (<li key={book.id}>\n                              <Book \n                                book={book} \n                                onChange={(setBook) => handleBookUpdate(setBook)} />\n                            </li>)\n                          } else {\n                            return ''\n                          }\n                        }\n                     )}\n                  </ol>\n                </div>\n              </div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Read</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    {library.map(\n                        (book) => {\n                          if (book.shelf === 'read') {\n                            return (<li key={book.id}>\n                              <Book \n                                book={book} \n                                onChange={(setBook) => handleBookUpdate(setBook)} />\n                            </li>)\n                          } else {\n                            return ''\n                          }\n                        }\n                     )}\n                  </ol>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"open-search\">\n            <Link\n              to='/search-books'\n              className='add-contact'>Add a book</Link>\n          </div>\n        </div>\n    )\n}\n\nListBooks.propTypes = {\n  library: PropTypes.array.isRequired,\n  onBookUpdate: PropTypes.func.isRequired\n}\n\nexport default ListBooks","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport Book from './Book'\nimport * as BooksAPI from './BooksAPI'\nimport PropTypes from 'prop-types'\n\nfunction SearchBooks({ onBookUpdate, library }) {\n    \n    const [query, setQuery] = useState('');\n    const [queryResults, setQueryResults] = useState([]);\n\n    const clearResults = () => {\n        setQueryResults([])\n    }\n\n    const searchQuery = (inputQuery) => {\n        setQuery(inputQuery)\n        if (inputQuery === '') {\n           clearResults()\n        } else {\n            BooksAPI.search(inputQuery).then((bookSearchResults) => {\n                if (bookSearchResults !== undefined && bookSearchResults.length > 0) {       \n                    setQueryResults([...bookSearchResults])\n                } else {\n                    clearResults()\n                }\n            })\n        }\n    }\n\n    const handleBookUpdate = (setBook) => {\n      if (onBookUpdate) {\n        onBookUpdate(setBook)\n      }\n    }\n\n    return (\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n                <Link\n                    to='/'\n                    className='close-search'>Close</Link>\n                <div className=\"search-books-input-wrapper\">\n                <input \n                    type='text'\n                    placeholder=\"Search by title or author\"\n                    value={query}\n                    onChange={(event) => searchQuery(event.target.value)} />\n                </div>\n            </div>\n            <div className=\"search-books-results\">\n                {queryResults.length > 0 && (\n                <div className='showing-shelf-books'>\n                    <ol className=\"books-grid\">\n                        {queryResults.map((book) => (\n                            ( book !== undefined &&\n                            <li key={book.id}>\n                                <Book \n                                    book={book} \n                                    myReads={library}\n                                    onChange={(setBook) => handleBookUpdate(setBook)} />\n                            </li>\n                            )\n                        ))}\n                    </ol>\n                </div>\n                )}\n            </div>\n        </div>\n    )\n    \n}\n\nSearchBooks.propTypes = {\n  library: PropTypes.array.isRequired,\n  onBookUpdate: PropTypes.func.isRequired\n}\n\n\nexport default SearchBooks","import React, { useState, useEffect } from 'react';\nimport './App.css'\nimport ListBooks from './ListBooks'\nimport SearchBooks from './SearchBooks'\nimport * as BooksAPI from './BooksAPI'\nimport { Route, Routes, useNavigate } from 'react-router-dom'\n\nfunction BooksApp() {\n\n  const [library, setLibrary] = useState([]);\n\n  useEffect(() => {\n    // Runs ONCE after initial rendering\n    async function fetchBooks() {\n      const booksFromApi = await BooksAPI.getAll();\n      setLibrary(booksFromApi);\n    }\n    fetchBooks();\n  }, []);\n\n  let updateBookStatus = (setBook) => {\n    let bookExists = false\n\n    const updatedLibrary = library.filter((book) => {\n        // filter out the 'none' books\n        if (book.id === setBook.id && setBook.shelf === 'none') {\n          return false // skip this to have it removed\n        } else {\n          return true\n        }\n    }).map((book) => { \n        // update book shelf if it exists\n        if (book.id === setBook.id && setBook.shelf !== 'none') {\n          bookExists = true\n          return {...book, shelf: setBook.shelf}\n        } else {\n          return book\n        }\n     })\n\n    if (!bookExists) {\n      const newBook = {...setBook.bookObj, shelf: setBook.shelf}\n      updatedLibrary.push(newBook)\n    }\n      \n    setLibrary(updatedLibrary);\n    \n    BooksAPI.update(setBook.bookObj, setBook.shelf)\n  }\n\n  \n  return (\n    <div className=\"app\">\n      <Routes>\n        <Route path='/' element={\n          <ListBooks \n            library={library}\n            onBookUpdate={(setBookShelf) => {\n              updateBookStatus(setBookShelf)\n            }}\n          />\n        } exact />\n        <Route path='/search-books' element={\n          <SearchBooks \n            library={library}\n            onBookUpdate={(setBookShelf) => {\n              updateBookStatus(setBookShelf)\n            }}\n          />\n        } />\n      </Routes>\n    </div>\n  )\n  \n}\n\nexport default () => {\n    let navigate = useNavigate();\n    return (\n        <BooksApp navigate={navigate} />\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}